CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(lkCommon)

IF(UNIX)
INCLUDE(FindPkgConfig)
ENDIF(UNIX)


# assume Release build
IF(NOT DEFINED CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE)

MESSAGE(STATUS "lkCommon build type: ${CMAKE_BUILD_TYPE}")


OPTION(LKCOMMON_BUILD_TEST "Build lkCommon unit tests" OFF)
OPTION(LKCOMMON_LOG_MEMORY "Enable Memory logs" OFF)
OPTION(LKCOMMON_LOG_CALL "Enable function call logs" OFF)


SET(LKCOMMON_ROOT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
SET(LKCOMMON_DIRECTORY ${LKCOMMON_ROOT_DIRECTORY}/lkCommon)
SET(LKCOMMON_DEPS_DIRECTORY ${LKCOMMON_ROOT_DIRECTORY}/Deps)

IF(WIN32)
    SET(LKCOMMON_OUTPUT_DIRECTORY ${LKCOMMON_ROOT_DIRECTORY}/Bin/${CMAKE_GENERATOR_PLATFORM}/${CMAKE_BUILD_TYPE})
ELSEIF(UNIX)
    SET(LKCOMMON_OUTPUT_DIRECTORY ${LKCOMMON_ROOT_DIRECTORY}/bin/${CMAKE_BUILD_TYPE})
ENDIF(WIN32)

SET(LKCOMMON_TARGET lkCommon)
SET(LKCOMMON_TEST_TARGET lkCommonTest)


MACRO(LKCOMMON_COPY_RESULT TARGET)
    ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND
                       ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${TARGET}> ${LKCOMMON_OUTPUT_DIRECTORY})
ENDMACRO(LKCOMMON_COPY_RESULT)


ADD_SUBDIRECTORY(Deps)
ADD_SUBDIRECTORY(lkCommon)

IF(LKCOMMON_BUILD_TEST)
    MESSAGE(STATUS "lkCommonTest will be included in build")
    ADD_SUBDIRECTORY(lkCommonTest)
ELSE(LKCOMMON_BUILD_TEST)
    MESSAGE(STATUS "lkCommonTest excluded from build")
ENDIF(LKCOMMON_BUILD_TEST)

SET(UNUSED_VAR_WARNING_SUPPRESSOR_IGNORE_ME_PLS
    "${LKCOMMON_BUILD_TEST}${LKCOMMON_LOG_MEMORY}${LKCOMMON_LOG_CALL}"
    )

FILE(MAKE_DIRECTORY ${LKCOMMON_OUTPUT_DIRECTORY})
